/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.util.Scanner;

public class App {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        RentalAgency rentalAgency = new RentalAgency();

        // Example data
        rentalAgency.addVehicle(new Car("C001", "Toyota Camry", 50.0, true));
        rentalAgency.addVehicle(new Motorcycle("M001", "Yamaha R1", 30.0, true));
        rentalAgency.addVehicle(new Truck("T001", "Ford F-150", 80.0, 5.0));
        rentalAgency.addCustomer(new Customer("CUS1", "Tracy Sey", "tdsey@example.com"));

        while (true) {
            System.out.println("\n1. Add Vehicle");
            System.out.println("2. Add Customer");
            System.out.println("3. List All Vehicles");
            System.out.println("4. List All Customers");
            System.out.println("5. Rent a Vehicle");
            System.out.println("6. Return a Vehicle");
            System.out.println("7. Rate a Vehicle");
            System.out.println("8. Exit");
            System.out.print("Select an option: ");
            int option = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (option) {
                 case 1:
                 System.out.println("Enter vehicle type (Car, Motorcycle, Truck): ");
                 String vehicleType = scanner.nextLine().toLowerCase(); // Convert input to lowercase for easier comparison
             
                 System.out.println("Enter vehicle ID: ");
                 String addVehicleId = scanner.nextLine().toUpperCase(); // Convert to uppercase for consistency
             
                 System.out.println("Enter vehicle model: ");
                 String model = scanner.nextLine();
             
                 System.out.println("Enter base rental rate: ");
                 double baseRentalRate = scanner.nextDouble();
             
                 switch (vehicleType) {
                     case "car":
                         System.out.println("Does the car have air conditioning? (yes/no): ");
                         scanner.nextLine(); // Consume leftover newline
                         boolean hasAirConditioning = scanner.nextLine().equalsIgnoreCase("yes");
                         rentalAgency.addVehicle(new Car(addVehicleId, model, baseRentalRate, hasAirConditioning));
                         System.out.println("Car added successfully!");
                         break;
             
                     case "motorcycle":
                         System.out.println("Does the motorcycle include a helmet? (yes/no): ");
                         scanner.nextLine(); // Consume leftover newline
                         boolean hasHelmet = scanner.nextLine().equalsIgnoreCase("yes");
                         rentalAgency.addVehicle(new Motorcycle(addVehicleId, model, baseRentalRate, hasHelmet));
                         System.out.println("Motorcycle added successfully!");
                         break;
             
                     case "truck":
                         System.out.println("Enter truck cargo capacity (in tons): ");
                         double cargoCapacity = scanner.nextDouble();
                         rentalAgency.addVehicle(new Truck(addVehicleId, model, baseRentalRate, cargoCapacity));
                         System.out.println("Truck added successfully!");
                         break;
             
                     default:
                         System.out.println("Invalid vehicle type. Please try again.");
                 }
                 break;
                case 2:
                    // Add customer logic (simplified for example)
                    System.out.println("Enter customer name: ");
                    String name = scanner.nextLine();
                    System.out.println("Enter customer email: ");
                    String email = scanner.nextLine();
                    String customerId = "CUS" + (rentalAgency.getCustomers().size() + 1);
                    Customer newCustomer = new Customer(customerId, name, email);
                    rentalAgency.addCustomer(newCustomer);
                    System.out.println("Customer added successfully! ID: " + customerId);
                    break;
                case 3:
                    System.out.println("These are the available vehicles:");
                    rentalAgency.getAvailableVehicles().forEach(System.out::println);
                    break;
                case 4:
                    System.out.println("These are the Registered Customers:");
                    rentalAgency.getCustomers().forEach(customer -> {
                    System.out.println(customer.getName() + " - Loyalty Points: " + customer.getLoyaltyPoints());
                    });
                    break;
                case 5:
                       // Rent a vehicle logic
                    System.out.println("Enter vehicle ID to rent: ");
                    String vehicleId = scanner.nextLine().toUpperCase();

                    System.out.println("Enter customer ID: ");
                    String renterCustomerId = scanner.nextLine().toUpperCase();

                    System.out.println("Enter number of rental days: ");
                    int rentalDays = scanner.nextInt();
                    scanner.nextLine(); // Consume leftover newline

                    Vehicle vehicleToRent = rentalAgency.findVehicleById(vehicleId);
                    if (vehicleToRent == null) {
                    System.out.println("Error: Vehicle not found.");
                    break;
                    }

                    // Calculate total cost
                    double totalCost = vehicleToRent.calculateRentalCost(rentalDays);
                    System.out.printf("The total cost for renting this vehicle is: GHC%.2f%n", totalCost);

                    System.out.println("Do you want to proceed with renting this vehicle? (yes/no): ");
                    String confirmation = scanner.nextLine().toLowerCase();

                    if (confirmation.equals("yes")) {
                    try {
                    rentalAgency.rentVehicle(vehicleId, renterCustomerId, rentalDays);
                    System.out.println("Vehicle rented successfully!");
                    } catch (IllegalArgumentException e) {
                    System.out.println("Error: " + e.getMessage());
                    }
                    } else {
                   System.out.println("Rental canceled. Returning to main menu.");
                    }
                    break;
                case 7:
                    // Rate a vehicle 
                    System.out.println("Enter vehicle ID to rate: ");
                    String rateVehicleId = scanner.nextLine().toUpperCase();;
                    System.out.println("Enter rating (1-5): ");
                    int rating = scanner.nextInt();
                    Vehicle vehicleToRate = rentalAgency.findVehicleById(rateVehicleId);
                    if (vehicleToRate != null) {
                        vehicleToRate.addRating(rating);
                        System.out.println("Vehicle rated successfully!");
                    } else {
                        System.out.println("Vehicle not found.");
                    }
                    break;
                case 8:
                    System.out.println("Exiting...Thank you for using the Vehicle Rental System.");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid option. Please Try again.");
            }
        }
    }
}